name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]" -c constraints.txt
    
    - name: Run tests with coverage
      run: |
        coverage run -m pytest tests/ -v --tb=short
        coverage report
        coverage xml
    
    - name: Test CLI functionality
      run: |
        python -m zestapi.cli version
        python -m zestapi.cli --help
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          .coverage
          coverage.xml

  lint:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" -c constraints.txt
    
    - name: Run black
      run: |
        black --check --diff zestapi/ tests/
    
    - name: Run isort
      run: |
        isort --check-only --diff zestapi/ tests/
    
    - name: Run flake8
      run: |
        flake8 zestapi/ tests/ --exclude=examples --max-line-length=88
    
    - name: Run mypy
      run: |
        mypy zestapi/

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]" -c constraints.txt
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r zestapi/ -f json -o bandit-report.json || true
        bandit -r zestapi/ -f txt -o bandit-report.txt || true
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Validate package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docs:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]" -c constraints.txt
    
    - name: Build documentation
      run: |
        mkdocs build --strict
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: site/

  summary:
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, docs]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "## ðŸš€ ZestAPI CI Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### âœ… Completed Jobs:" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Linting: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation: ${{ needs.docs.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Coverage:" >> $GITHUB_STEP_SUMMARY
        echo "Test coverage reports are available as artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ”’ Security:" >> $GITHUB_STEP_SUMMARY
        echo "Security scan reports are available as artifacts." >> $GITHUB_STEP_SUMMARY 